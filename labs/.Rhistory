geom_point() +
geom_smooth() +
facet_grid(~line)
delay_2022 |>
mutate(week = week(date)) |>
group_by(week, line) |>
summarise(prop_delay = sum(min_delay>10)/n()) |>
ggplot(aes(week, prop_delay, color = line)) +
geom_point() +
geom_smooth() +
facet_grid(~line)
delay_2022 |>
group_by(line, code_desc) |>
summarise(mean_delay = mean(min_delay)) |>
arrange(-mean_delay) |>
slice(1:5) |>
ggplot(aes(x = code_desc,
y = mean_delay)) +
geom_col() +
facet_wrap(vars(line),
scales = "free_y",
nrow = 4) +
coord_flip()
delay_2022 <- delay_2022 |>
mutate(code_red = case_when(
str_starts(code_desc, "No") ~ word(code_desc, 1, 2),
str_starts(code_desc, "Operator") ~ word(code_desc, 1,2),
TRUE ~ word(code_desc,1))
)
dwide <- delay_2022 |>
group_by(line, station_clean) |>
mutate(n_obs = n()) |>
filter(n_obs>1) |>
group_by(code_red) |>
mutate(tot_delay = n()) |>
arrange(tot_delay) |>
filter(tot_delay>50) |>
group_by(line, station_clean, code_red) |>
summarise(n_delay = n()) |>
pivot_wider(names_from = code_red, values_from = n_delay) |>
mutate(
across(everything(), ~ replace_na(.x, 0))
)
delay_pca <- prcomp(dwide[,3:ncol(dwide)])
df_out <- as_tibble(delay_pca$x)
df_out <- bind_cols(dwide |> select(line, station_clean), df_out)
head(df_out)
ggplot(df_out,aes(x=PC1,y=PC2,color=line )) + geom_point() + geom_text_repel(data = df_out |> filter(PC2>100|PC1<100*-1), aes(label = station_clean))
df_out_r <- as_tibble(delay_pca$rotation)
df_out_r$feature <- colnames(dwide[,3:ncol(dwide)])
df_out_r
ggplot(df_out_r,aes(x=PC1,y=PC2,label=feature )) + geom_text_repel()
delay_2022 |>
group_by(station,line) |>
summarise(mean_delay=mean(min_delay)) |>
arrange(-mean_delay)|>
head(5) |>
ggplot(aes(x = station,
y = mean_delay))+
geom_col()+
facet_wrap(.~line)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line + code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line*code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- aov(min_delay ~ line*code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- aov(min_delay ~ line + code + line*code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line + code + line*code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line*code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
all_data <- search_packages("campaign")
campaign_id <- all_data$id
resource <- list_package_resources(campaign_id[1])
resource
campaign_data <- get_resource('8b42906f-c894-4e93-a98e-acac200f34a4')
campaign_data_mayoral <- campaign_data[[2]]
colnames(campaign_data_mayoral) <- as.character(campaign_data_mayoral[1,])
campaign_data_mayoral <- campaign_data_mayoral[-1,]
rownames(campaign_data_mayoral) <- NULL
campaign_data_mayoral <- clean_names(campaign_data_mayoral)
campaign_data_mayoral
not_all_na <- function(x) all(!is.na(x))
campaign_data_mayoral <- campaign_data_mayoral|>
select(where(not_all_na))
campaign_data_mayoral
campaign_data_mayoral$contributor_type_desc <- as.factor(campaign_data_mayoral$contributor_type_desc)
campaign_data_mayoral$contribution_type_desc <- as.factor(campaign_data_mayoral$contribution_type_desc)
campaign_data_mayoral$contribution_amount <- as.numeric(campaign_data_mayoral$contribution_amount)
campaign_data_mayoral
campaign_data_mayoral |> arrange(-contribution_amount)
ggplot(data = campaign_data_mayoral,aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution <-
campaign_data_mayoral |> filter(contribution_amount < 500000)
ggplot(data=campaign_data_mayoral_contribution_distribution, aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution_2 <-
campaign_data_mayoral |> filter(contribution_amount < 10000)
ggplot(data=campaign_data_mayoral_contribution_distribution_2, aes(x=contribution_amount))+
geom_histogram()
ggplot(data = campaign_data_mayoral, aes(x = candidate,
y = contribution_amount,
color = contribution_type_desc ))+
geom_point()+
geom_smooth()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
non_candidate_contri <- campaign_data_mayoral |>
filter(contributors_name != candidate)
non_candidate_contri <- non_candidate_contri|>
group_by(candidate) |>
summarise(
total_contri_popular = sum(contribution_amount, na.rm = TRUE),
mean_contri_popular = mean(contribution_amount, na.rm = TRUE),
contri_count_popular = n()
)
top_total_contri_popular <- non_candidate_contri |>
arrange(-total_contri_popular)|>
select(candidate,total_contri_popular)|>
head(5)
top_mean_contri_popular <- non_candidate_contri |>
arrange(-mean_contri_popular)|>
select(candidate,mean_contri_popular)|>
head(5)
top_contri_count_popular <- non_candidate_contri |>
arrange(-contri_count_popular)|>
select(candidate,contri_count_popular)|>
head(5)
top_total_contri_popular
top_mean_contri_popular
top_contri_count_popular
multiple_contri <- campaign_data_mayoral |>
group_by(contributors_name) |>
summarise(unique_candidates = n_distinct(candidate))
multiple_contri_count <- sum(multiple_contri$unique_candidates > 1)
multiple_contri_count
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
all_data <- list_packages(limit = 500)
head(all_data)
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()
delay_2022 <- get_resource(delay_2022_ids)
# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
head(delay_2022)
delay_2022 |>
group_by(station,line) |>
summarise(mean_delay=mean(min_delay)) |>
arrange(-mean_delay)|>
head(5) |>
ggplot(aes(x = station,
y = mean_delay))+
geom_col()+
facet_wrap(.~line)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
delay_2022 <- delay_2022 |>
left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc))
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line + code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
library(opendatatoronto)
library(janitor)
all_data <- search_packages("campaign")
campaign_id <- all_data$id
resource <- list_package_resources(campaign_id[1])
resource
campaign_data <- get_resource('8b42906f-c894-4e93-a98e-acac200f34a4')
campaign_data_mayoral <- campaign_data[[2]]
colnames(campaign_data_mayoral) <- as.character(campaign_data_mayoral[1,])
campaign_data_mayoral <- campaign_data_mayoral[-1,]
rownames(campaign_data_mayoral) <- NULL
campaign_data_mayoral <- clean_names(campaign_data_mayoral)
campaign_data_mayoral
not_all_na <- function(x) all(!is.na(x))
campaign_data_mayoral <- campaign_data_mayoral|>
select(where(not_all_na))
campaign_data_mayoral
campaign_data_mayoral$contributor_type_desc <- as.factor(campaign_data_mayoral$contributor_type_desc)
campaign_data_mayoral$contribution_type_desc <- as.factor(campaign_data_mayoral$contribution_type_desc)
campaign_data_mayoral$contribution_amount <- as.numeric(campaign_data_mayoral$contribution_amount)
campaign_data_mayoral
campaign_data_mayoral |> arrange(-contribution_amount)
ggplot(data = campaign_data_mayoral,aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution <-
campaign_data_mayoral |> filter(contribution_amount < 500000)
ggplot(data=campaign_data_mayoral_contribution_distribution, aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution_2 <-
campaign_data_mayoral |> filter(contribution_amount < 10000)
ggplot(data=campaign_data_mayoral_contribution_distribution_2, aes(x=contribution_amount))+
geom_histogram()
ggplot(data = campaign_data_mayoral, aes(x = candidate,
y = contribution_amount,
color = contribution_type_desc ))+
geom_point()+
geom_smooth()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
candidate_contri <- campaign_data_mayoral|>
group_by(candidate) |>
summarise(
total_contri = sum(contribution_amount, na.rm = TRUE),
mean_contri = mean(contribution_amount, na.rm = TRUE),
contri_count = n()
)
top_total_contri <- candidate_contri |>
arrange(-total_contri)|>
select(candidate,total_contri)|>
head(5)
top_mean_contri <- candidate_contri |>
arrange(-mean_contri)|>
select(candidate,mean_contri)|>
head(5)
top_contri_count <- candidate_contri |>
arrange(-contri_count)|>
select(candidate,contri_count)|>
head(5)
top_total_contri
top_mean_contri
top_contri_count
non_candidate_contri <- campaign_data_mayoral |>
filter(contributors_name != candidate)
non_candidate_contri <- non_candidate_contri|>
group_by(candidate) |>
summarise(
total_contri_popular = sum(contribution_amount, na.rm = TRUE),
mean_contri_popular = mean(contribution_amount, na.rm = TRUE),
contri_count_popular = n()
)
top_total_contri_popular <- non_candidate_contri |>
arrange(-total_contri_popular)|>
select(candidate,total_contri_popular)|>
head(5)
top_mean_contri_popular <- non_candidate_contri |>
arrange(-mean_contri_popular)|>
select(candidate,mean_contri_popular)|>
head(5)
top_contri_count_popular <- non_candidate_contri |>
arrange(-contri_count_popular)|>
select(candidate,contri_count_popular)|>
head(5)
top_total_contri_popular
top_mean_contri_popular
top_contri_count_popular
skim(campaign_data_mayoral)
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
all_data <- list_packages(limit = 500)
head(all_data)
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()
delay_2022 <- get_resource(delay_2022_ids)
# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
head(delay_2022)
delay_2022 |>
group_by(station,line) |>
summarise(mean_delay=mean(min_delay)) |>
arrange(-mean_delay)|>
head(5) |>
ggplot(aes(x = station,
y = mean_delay))+
geom_col()+
facet_wrap(.~line)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
delay_2022 <- delay_2022 |>
left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc))
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line + code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
library(opendatatoronto)
library(janitor)
all_data <- search_packages("campaign")
campaign_id <- all_data$id
resource <- list_package_resources(campaign_id[1])
resource
campaign_data <- get_resource('8b42906f-c894-4e93-a98e-acac200f34a4')
campaign_data_mayoral <- campaign_data[[2]]
colnames(campaign_data_mayoral) <- as.character(campaign_data_mayoral[1,])
campaign_data_mayoral <- campaign_data_mayoral[-1,]
rownames(campaign_data_mayoral) <- NULL
campaign_data_mayoral <- clean_names(campaign_data_mayoral)
campaign_data_mayoral
skim(campaign_data_mayoral)
not_all_na <- function(x) all(!is.na(x))
campaign_data_mayoral <- campaign_data_mayoral|>
select(where(not_all_na))
campaign_data_mayoral
campaign_data_mayoral$contributor_type_desc <- as.factor(campaign_data_mayoral$contributor_type_desc)
campaign_data_mayoral$contribution_type_desc <- as.factor(campaign_data_mayoral$contribution_type_desc)
campaign_data_mayoral$contribution_amount <- as.numeric(campaign_data_mayoral$contribution_amount)
campaign_data_mayoral
campaign_data_mayoral |> arrange(-contribution_amount)
ggplot(data = campaign_data_mayoral,aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution <-
campaign_data_mayoral |> filter(contribution_amount < 500000)
ggplot(data=campaign_data_mayoral_contribution_distribution, aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution_2 <-
campaign_data_mayoral |> filter(contribution_amount < 10000)
ggplot(data=campaign_data_mayoral_contribution_distribution_2, aes(x=contribution_amount))+
geom_histogram()
ggplot(data = campaign_data_mayoral, aes(x = candidate,
y = contribution_amount,
color = contribution_type_desc ))+
geom_point()+
geom_smooth()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
candidate_contri <- campaign_data_mayoral|>
group_by(candidate) |>
summarise(
total_contri = sum(contribution_amount, na.rm = TRUE),
mean_contri = mean(contribution_amount, na.rm = TRUE),
contri_count = n()
)
top_total_contri <- candidate_contri |>
arrange(-total_contri)|>
select(candidate,total_contri)|>
head(5)
top_mean_contri <- candidate_contri |>
arrange(-mean_contri)|>
select(candidate,mean_contri)|>
head(5)
top_contri_count <- candidate_contri |>
arrange(-contri_count)|>
select(candidate,contri_count)|>
head(5)
top_total_contri
top_mean_contri
top_contri_count
non_candidate_contri <- campaign_data_mayoral |>
filter(contributors_name != candidate)
non_candidate_contri <- non_candidate_contri|>
group_by(candidate) |>
summarise(
total_contri_popular = sum(contribution_amount, na.rm = TRUE),
mean_contri_popular = mean(contribution_amount, na.rm = TRUE),
contri_count_popular = n()
)
top_total_contri_popular <- non_candidate_contri |>
arrange(-total_contri_popular)|>
select(candidate,total_contri_popular)|>
head(5)
top_mean_contri_popular <- non_candidate_contri |>
arrange(-mean_contri_popular)|>
select(candidate,mean_contri_popular)|>
head(5)
top_contri_count_popular <- non_candidate_contri |>
arrange(-contri_count_popular)|>
select(candidate,contri_count_popular)|>
head(5)
top_total_contri_popular
top_mean_contri_popular
top_contri_count_popular
View(campaign_data_mayoral)
campaign_data_mayoral |> distinct()
duplicated(campaign_data_mayoral)
campaign_data_mayoral[duplicated(campaign_data_mayoral),]
campaign_data_mayoral|>
distinct()
campaign_data_mayoral|>
filter(n()>1)
campaign_data_mayoral|>
filter(n()>2)
campaign_data_mayoral|>
filter(n()>3)
campaign_data_mayoral|>
filter(n()>10)
campaign_data_mayoral|>
group_by(contribution_amount)
filter(n()>1)
campaign_data_mayoral|>
group_by(contribution_amount)|>
filter(n()>1)
campaign_data_mayoral[duplicated(campaign_data_mayoral),]
