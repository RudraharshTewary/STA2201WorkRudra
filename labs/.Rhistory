delay_2022 |>
group_by(station,line) |>
summarise(mean_delay=mean(min_delay)) |>
arrange(-mean_delay)|>
head(5) |>
ggplot(aes(x = station,
y = mean_delay))+
geom_col()+
facet_wrap(.~line)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
delay_2022 <- delay_2022 |>
left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc))
delay_2022_top_0.5 <- delay_2022 |>
filter(min_delay>0)|>
group_by(code)|>
summarise(no_rows = length(code))|>
arrange(-no_rows)|>
mutate(cumulative_sum = cumsum(no_rows))|>
mutate(half_sum = sum(no_rows)/2)|>
filter(cumulative_sum<=half_sum)
delay_2022_top_0.5
frequent_delay_codes <- delay_2022_top_0.5$code
frequent_delay_codes
lm_table_delay_code <- delay_2022|>
filter(min_delay>0 & (code %in% frequent_delay_codes))
delay_model <- lm(min_delay ~ line + code, data = lm_table_delay_code)
summary(delay_model)
lm_table_delay_code
library(opendatatoronto)
library(janitor)
all_data <- search_packages("campaign")
campaign_id <- all_data$id
resource <- list_package_resources(campaign_id[1])
resource
campaign_data <- get_resource('8b42906f-c894-4e93-a98e-acac200f34a4')
campaign_data_mayoral <- campaign_data[[2]]
colnames(campaign_data_mayoral) <- as.character(campaign_data_mayoral[1,])
campaign_data_mayoral <- campaign_data_mayoral[-1,]
rownames(campaign_data_mayoral) <- NULL
campaign_data_mayoral <- clean_names(campaign_data_mayoral)
campaign_data_mayoral
skim(campaign_data_mayoral)
not_all_na <- function(x) all(!is.na(x))
campaign_data_mayoral <- campaign_data_mayoral|>
select(where(not_all_na))
campaign_data_mayoral
campaign_data_mayoral$contributor_type_desc <- as.factor(campaign_data_mayoral$contributor_type_desc)
campaign_data_mayoral$contribution_type_desc <- as.factor(campaign_data_mayoral$contribution_type_desc)
campaign_data_mayoral$contribution_amount <- as.numeric(campaign_data_mayoral$contribution_amount)
campaign_data_mayoral
campaign_data_mayoral |> arrange(-contribution_amount)
ggplot(data = campaign_data_mayoral,aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution <-
campaign_data_mayoral |> filter(contribution_amount < 500000)
ggplot(data=campaign_data_mayoral_contribution_distribution, aes(x=contribution_amount))+
geom_dotplot()
campaign_data_mayoral_contribution_distribution_2 <-
campaign_data_mayoral |> filter(contribution_amount < 10000)
ggplot(data=campaign_data_mayoral_contribution_distribution_2, aes(x=contribution_amount))+
geom_histogram()
ggplot(data = campaign_data_mayoral, aes(x = candidate,
y = contribution_amount,
color = contribution_type_desc ))+
geom_point()+
geom_smooth()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
candidate_contri <- campaign_data_mayoral|>
group_by(candidate) |>
summarise(
total_contri = sum(contribution_amount, na.rm = TRUE),
mean_contri = mean(contribution_amount, na.rm = TRUE),
contri_count = n()
)
top_total_contri <- candidate_contri |>
arrange(-total_contri)|>
select(candidate,total_contri)|>
head(5)
top_mean_contri <- candidate_contri |>
arrange(-mean_contri)|>
select(candidate,mean_contri)|>
head(5)
top_contri_count <- candidate_contri |>
arrange(-contri_count)|>
select(candidate,contri_count)|>
head(5)
top_total_contri
top_mean_contri
top_contri_count
non_candidate_contri <- campaign_data_mayoral |>
filter(contributors_name != candidate)
non_candidate_contri <- non_candidate_contri|>
group_by(candidate) |>
summarise(
total_contri_popular = sum(contribution_amount, na.rm = TRUE),
mean_contri_popular = mean(contribution_amount, na.rm = TRUE),
contri_count_popular = n()
)
top_total_contri_popular <- non_candidate_contri |>
arrange(-total_contri_popular)|>
select(candidate,total_contri_popular)|>
head(5)
top_mean_contri_popular <- non_candidate_contri |>
arrange(-mean_contri_popular)|>
select(candidate,mean_contri_popular)|>
head(5)
top_contri_count_popular <- non_candidate_contri |>
arrange(-contri_count_popular)|>
select(candidate,contri_count_popular)|>
head(5)
top_total_contri_popular
top_mean_contri_popular
top_contri_count_popular
View(campaign_data_mayoral)
campaign_data_mayoral |> distinct()
duplicated(campaign_data_mayoral)
campaign_data_mayoral[duplicated(campaign_data_mayoral),]
campaign_data_mayoral|>
distinct()
campaign_data_mayoral|>
filter(n()>1)
campaign_data_mayoral|>
filter(n()>2)
campaign_data_mayoral|>
filter(n()>3)
campaign_data_mayoral|>
filter(n()>10)
campaign_data_mayoral|>
group_by(contribution_amount)
filter(n()>1)
campaign_data_mayoral|>
group_by(contribution_amount)|>
filter(n()>1)
campaign_data_mayoral[duplicated(campaign_data_mayoral),]
theta <- seq(-5,5,length.out = 100)
x <- 100
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - qnorm(x,mean = theta,sd=1))(qnorm(x,mean = theta,sd=1))
var_theta_hat
theta <- seq(-5,5,length.out = 100)
x <- 100
var_theta_hat <- (dnorm(mean = theta,sd=1))^2
theta <- seq(-5,5,length.out = 100)
x <- 100
var_theta_hat <- (dnorm(0,mean = theta,sd=1))^2
var_theta_tilde <- (1 - qnorm(x,mean = theta,sd=1))(qnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- 100
var_theta_hat <- (dnorm(0,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- 100
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
var_theta_hat <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
theta <- seq(-5,5,length.out = 100)
x <- seq(-5,5,length.out = 100)
for (i in theta) {
var_theta_hat[i] <- (dnorm(x,mean = theta,sd=1))^2
var_theta_tilde[i] <- (1 - pnorm(x,mean = theta,sd=1))(pnorm(x,mean = theta,sd=1))
asymptotic_efficiency[i] <- var_theta_hat/var_theta_tilde
}
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (((var_theta_hat)^2)/61)/var_theta_tilde
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (((var_theta_hat)^2)/100)/var_theta_tilde
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (((var_theta_hat)^2)/100)/var_theta_tilde
plot(asymptotic_efficiency,theta)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (((var_theta_hat)^2)/61)/var_theta_tilde
plot(asymptotic_efficiency,theta)
var_theta_tilde
var_theta_hat
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde*100
plot(asymptotic_efficiency,theta)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(asymptotic_efficiency,theta)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(asymptotic_efficiency,theta)
theta <- seq(-5,5,length.out = 100)
z_scores <- seq(-3, 3, by = .1)
var_theta_hat <- dnorm(z_scores,mean=theta,sd=1)
var_theta_tilde <- (pnorm(z_scores,mean=theta,sd=1))*(1-pnorm(z_scores,mean=theta,sd=1))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(theta,asymptotic_efficiency)
var_theta_hat <- dnorm(theta)
var_theta_tilde <- (pnorm(theta))*(1-pnorm(theta))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 10000)
var_theta_hat <- dnorm(theta)
var_theta_tilde <- (pnorm(theta))*(1-pnorm(theta))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 10000)
var_theta_hat <- dnorm(theta)
var_theta_tilde <- (pnorm(theta))*(1-pnorm(theta))
asymptotic_efficiency <- var_theta_tilde/(var_theta_hat)^2
plot(theta,asymptotic_efficiency)
theta <- seq(-5,5,length.out = 10000)
var_theta_hat <- dnorm(theta)
var_theta_tilde <- (pnorm(theta))*(1-pnorm(theta))
asymptotic_efficiency <- (var_theta_hat)^2/var_theta_tilde
plot(theta,asymptotic_efficiency)
x <- 118
n <- 129
mle <- x/n
z <- 1.96
se <- sqrt((mle*(1-mle))/n)
lower_bound <- mle - z*se
upper_bound <- mle + z*se
confidence_interval <- c(lower_bound,upper_bound)
mle
confidence_interval
alpha_posterior <- 1 + x
beta_posterior <- 1 + n-x
posterior_mean <- alpha_posterior/(alpha_posterior+beta_posterior)
credibility_interval <- qbeta(c(0.025,0.975),alpha_posterior,beta_posterior)
posterior_mean
credibility_interval
alpha_posterior_new <- 10 + x
beta_posterior_new <- 10 + n-x
posterior_mean_new <- alpha_posterior_new/(alpha_posterior_new + beta_posterior_new)
credibility_interval_new <- qbeta(c(0.025,0.975),alpha_posterior_new,beta_posterior_new)
posterior_mean_new
credibility_interval_new
library(ggplot2)
# Set the number of trials and the vector of possible successes
n <- 129  # total number of women
x <- 118  # number of women reported being happy
# Create a data frame with possible values of theta and their likelihoods
theta_values <- seq(0, 1, by = 0.01)
likelihood <- dbinom(x, size = n, prob = theta_values)
data <- data.frame(theta = theta_values, likelihood = likelihood)
# Create a histogram using ggplot2
ggplot(data, aes(x = theta, y = likelihood)) +
geom_histogram(stat = "identity", fill = "skyblue", color = "black", bins = 30) +
labs(title = "Binomial Likelihood for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Likelihood") +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Set the number of trials and the vector of possible successes
n <- 129  # total number of women
x <- 118  # number of women reported being happy
# Function to calculate the PDF of a beta distribution
beta_pdf <- function(theta, alpha, beta) {
dbeta(theta, shape1 = alpha, shape2 = beta)
}
# Define the prior parameters
prior_alpha <- 1
prior_beta <- 1
# Define the posterior parameters based on observed data
posterior_alpha <- x + prior_alpha
posterior_beta <- n - x + prior_beta
# Create a data frame with possible values of theta
theta_values <- seq(0, 1, by = 0.01)
data <- data.frame(theta = theta_values)
# Plot prior and posterior using ggplot2
ggplot(data, aes(x = theta)) +
stat_function(fun = beta_pdf, args = list(alpha = prior_alpha, beta = prior_beta),
geom = "line", aes(color = "Prior"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = posterior_alpha, beta = posterior_beta),
geom = "line", aes(color = "Posterior"), size = 1, linetype = "dashed") +
labs(title = "Beta Prior and Posterior for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Density") +
scale_color_manual(values = c("Prior" = "blue", "Posterior" = "red")) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Set the number of trials and the vector of possible successes
n <- 129  # total number of women
x <- 118  # number of women reported being happy
# Function to calculate the PDF of a beta distribution
beta_pdf <- function(theta, alpha, beta) {
dbeta(theta, shape1 = alpha, shape2 = beta)
}
# Create a data frame with possible values of theta
theta_values <- seq(0, 1, by = 0.01)
data <- data.frame(theta = theta_values)
# Plot prior and posterior using ggplot2
ggplot(data, aes(x = theta)) +
stat_function(fun = beta_pdf, args = list(alpha = 1, beta = 1),
geom = "line", aes(color = "Prior"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior, beta = beta_posterior),
geom = "line", aes(color = "Posterior"), size = 1, linetype = "dashed") +
labs(title = "Beta Prior and Posterior for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Density") +
scale_color_manual(values = c("Prior" = "blue", "Posterior" = "red")) +
theme_minimal()
# We can get the 2nd prior and posterior distribution as follows
ggplot(data, aes(x = theta)) +
stat_function(fun = beta_pdf, args = list(alpha = 10, beta = 10),
geom = "line", aes(color = "Prior"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior_new, beta = beta_posterior_new),
geom = "line", aes(color = "Posterior"), size = 1, linetype = "dashed") +
labs(title = "Beta Prior and Posterior for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Density") +
scale_color_manual(values = c("Prior" = "blue", "Posterior" = "red")) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Set the number of trials and the vector of possible successes
n <- 129  # total number of women
x <- 118  # number of women reported being happy
# Function to calculate the PDF of a beta distribution
beta_pdf <- function(theta, alpha, beta) {
dbeta(theta, shape1 = alpha, shape2 = beta)
}
# Create a data frame with possible values of theta
theta_values <- seq(0, 1, by = 0.01)
data <- data.frame(theta = theta_values)
# Plot prior and posterior using ggplot2
ggplot(data, aes(x = theta)) +
stat_function(fun = beta_pdf, args = list(alpha = 1, beta = 1),
geom = "line", aes(color = "Prior"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior, beta = beta_posterior),
geom = "line", aes(color = "Posterior"), size = 1, linetype = "dashed") +
stat_function(fun = beta_pdf, args = list(alpha = 10, beta = 10),
geom = "line", aes(color = "Prior_10"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior_new, beta = beta_posterior_new),
geom = "line", aes(color = "Posterior_10"), size = 1, linetype = "dashed") +
labs(title = "Beta Prior and Posterior for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Density") +
scale_color_manual(values = c("Prior" = "blue", "Posterior" = "red","Prior_10"="black","Posterior_10"="purple")) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
beta_pdf <- function(theta, alpha, beta) {
dbeta(theta, shape1 = alpha, shape2 = beta)
}
ggplot(data, aes(x = theta)) +
stat_function(fun = beta_pdf, args = list(alpha = 1, beta = 1),
geom = "line", aes(color = "Prior"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior, beta = beta_posterior),
geom = "line", aes(color = "Posterior"), size = 1, linetype = "dashed") +
stat_function(fun = beta_pdf, args = list(alpha = 10, beta = 10),
geom = "line", aes(color = "Prior_10"), size = 1) +
stat_function(fun = beta_pdf, args = list(alpha = alpha_posterior_new, beta = beta_posterior_new),
geom = "line", aes(color = "Posterior_10"), size = 1, linetype = "dashed") +
labs(title = "Beta Prior and Posterior for Women Aged 65+",
x = "Proportion of Women Happy (Theta)",
y = "Density") +
scale_color_manual(values = c("Prior" = "blue", "Posterior" = "red","Prior_10"="black","Posterior_10"="purple")) +
theme_minimal()
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.5,251528,241946)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.5,b,t)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.5,b,t-b)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.5,b+1,t-b+1)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.6,b+1,t-b+1)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.51,b+1,t-b+1)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.52,b+1,t-b+1)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.51,b+1,t-b+1)
probability
b = 251527
t = 493472
alpha_posterior_laplace <- 1 + b
beta_posterior_laplace <- 1 + t - b
posterior_mean_laplace <- alpha_posterior_laplace/(alpha_posterior_laplace + beta_posterior_laplace)
credibility_interval_laplace <- qbeta(c(0.025,0.975),alpha_posterior_laplace,beta_posterior_laplace)
posterior_mean_laplace
credibility_interval_laplace
probability <- pbeta(0.5,b+1,t-b+1)
probability
b = 251527
g = 241945
probability <- pbeta(0.5,b+1,g+1)
probability
