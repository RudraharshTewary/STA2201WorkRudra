---
title: "Applied_Stat_2_Lab_6_Solved"
format: pdf
editor: visual
---

## Question 1

```{r}
library(tidyverse)
library(here)
# for bayes stuff
library(rstan)
library(bayesplot)
library(loo)
library(tidybayes)
ds <- read_rds(here("births_2017_sample.RDS"))
head(ds)


```

We first read in the dataset and make the required changes in the next cell:

```{r}
ds <- ds %>%
rename(birthweight = dbwt, gest = combgest) %>%
mutate(preterm = ifelse(gest<32, "Y", "N")) %>%
filter(ilive=="Y",gest< 99, birthweight<9.999)
```

Now, we proceed to make our plots:

```{r}
library(ggplot2)

scatter_plot <- ggplot(ds, aes(x = gest, y = birthweight)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Scatter Plot of Gestational Age vs. Birthweight",
       x = "Gestational Age",
       y = "Birthweight")

histogram_plot <- ggplot(ds, aes(x = birthweight)) +
  geom_histogram(binwidth = 0.5, fill = "green", color = "black") +
  labs(title = "Histogram of Birthweights",
       x = "Birthweight",
       y = "Frequency")

preterm_proportion_table <- ds %>%
  group_by(preterm) %>%
  summarize(Proportion = n() / nrow(ds) * 100) %>%
  mutate(Preterm = ifelse(preterm == "Y", "Yes", "No"))

scatter_plot
histogram_plot
preterm_proportion_table
```

We notice the following trends from our plots and tables:

1.  The birth weight linearly increases with the gestational age.

2.  Most babies are born with a weight between 3 and 4 kilograms.

3.  About 2% of babies are born preterm, that is before 32 weeks.

## Question 2

We simulate the betas and sigma using the given distribution and get the following plots of simulated values:

```{r}

library(ggplot2)


beta_1 <- matrix(nrow = 1000,ncol = 10)
beta_2 <- matrix(nrow = 1000,ncol = 10)
beta_3 <- matrix(nrow = 1000,ncol = 10)
sigma <- matrix(nrow = 1000,ncol = 10)
simulated_weight <- matrix(nrow = 1000,ncol = 10)

Y <- log(ds$gest)
Y_cent <- scale(Y)
samp1000 <- sample(nrow(Y_cent),1000)
for (i in 1:10){
beta_1[,i] <- rnorm(1000,mean = 0,sd=1)
beta_2[,i] <- rnorm(1000,mean = 0,sd=1)
sigma[,i] <- abs(rnorm(1000,mean = 0,sd = 1))

simulated_weight[,i] <- beta_1[,i] + beta_2[,i]*head(Y_cent,1000) + sigma[,i]
}

# Assuming 'simulated_weight' is the matrix containing all simulations
hist(simulated_weight, col = 1:10, main = "Distribution of All Simulated (log) Birth Weights", xlab = "Simulated (log) Birth Weights")

df <- data.frame(GestationalAge = rep(Y_cent[1:1000], each = 10),
                 SimulatedWeight = as.vector(simulated_weight),
                 Simulation = rep(1:10, each = 1000))

# Create ggplot with points for each simulation
ggplot(df, aes(x = GestationalAge, y = SimulatedWeight, color = factor(Simulation))) +
  geom_point(alpha = 0.5) +
  labs(title = "Simulations of (log) Birth Weights against Gestational Age",
       x = "Gestational Age",
       y = "(log) Birth Weights",
       color = "Simulation") +
  theme_minimal()


```

## Question 3

We first add the new columns of log_weight and logged and standardized gestational age to our table:

```{r}
ds$log_weight <- log(ds$birthweight)
ds$log_gest_c <- (log(ds$gest) - mean(log(ds$gest)))/sd(log(ds$gest))
# put into a list
stan_data <- list(N = nrow(ds),
log_weight = ds$log_weight,
log_gest = ds$log_gest_c)

```

Now, we create the model 1 fit object through stan:

```{r}
#| output: false
mod1 <- stan(data = stan_data,
file = here("code/models/simple_weight.stan"),
iter = 500,
seed = 243)
```

Finally, we use the fit object and then extract posterior estimates to get the expected birth weight at 37 weeks of gestation:

```{r}
fit1 <- rstan::extract(mod1)
beta_post <- fit1$beta
sigma_post <- fit1$sigma
beta_post_1 <- beta_post[,1]
beta_post_2 <- beta_post[,2]
std_weight <- log(abs(37-mean(ds$gest))/sd(ds$gest))
expected_birthweight <- median(beta_post_1) + median(beta_post_2)*std_weight
exp(expected_birthweight)

```

## Question 4

We proceed to use the following code to get and plot 50 posterior draws of our predictor of log_weight against observed data:

```{r}
observed_log_weight <- ds$log_weight
log_gest_centered <- ds$log_gest_c
lin_pred <- matrix (ncol=3842,nrow = 50)
for(i in 1:50){
  lin_pred[i,] <- beta_post[i,1] + beta_post[i,2]*log_gest_centered
}
pred_df <- data.frame(gest_standardized = rep(log_gest_centered,each=50),log_weight_pred = as.vector(lin_pred))
observed_df <- data.frame(observed_log_weight = observed_log_weight,log_gest_centered = log_gest_centered)

ggplot()+
  geom_point(data = observed_df,aes(x=log_gest_centered,y=observed_log_weight, color = "Observed Data"),alpha=0.5)+
  geom_point(data = pred_df, aes(x=gest_standardized,y=log_weight_pred, color = "Linear Predictor Draw"),alpha=0.5)+
  labs(title = "Scatter plot of observed data and 50 posterior draws of linear predictor",
       x = "Gestational age standardized in log scale",
       y = "Birthweight in log scale")
```

## Question 5

We use the following code to build our stan model:

```{r}
#| output: false
preterm <- ifelse(ds$preterm=="Y",1,0)
stan_data<- list(N = nrow(ds),
log_weight = ds$log_weight,
log_gest = ds$log_gest_c,
preterm = preterm,
Inter = preterm*ds$log_gest_c)
mod2 <- stan(data = stan_data,
file = here("code/models/simple_weight_model_2.stan"),
iter = 500,
seed = 243)
```

And we use the in built summary function to get the coefficient estimates:

```{r}
rstan::summary(mod2,pars = c("beta","sigma"))
```

We observe that the coefficient for the interaction term is around $0.197$, as this is an interaction term, what this tells us is that the effect of gestational age on the birth weight of a baby is stronger if the baby is preterm. Also, we know the effect exists because the credible interval for our estimate of beta\[4\] does not contain 0

(Note: The reason why my model has an extra coefficient is because I added a new coefficient beta\[3\] for preterm, I believe there was an error in the lab document, where the same coefficient beta\[2\] was assigned to both preterm and log_gest_c)

## Question 6

We proceed to use the following code to make our plot:

```{r}
library(reshape2)

y <- ds$log_weight
fit_mod2 <- rstan::extract(mod2)
yrep1 <- fit_mod2$log_weight_rep
samp100 <- sample(nrow(yrep1), 100)


post_y <- yrep1[samp100,]

plot_data <- data.frame(
  value = c(as.vector(post_y), y),
  type = rep(c(rep("Predicted", nrow(post_y)), "Observed"), each = length(y)),
  sample = rep(0:nrow(post_y), each = length(y))
)

# Plot using geom_density
ggplot(plot_data, aes(x = value, color = type, group = interaction(type, sample))) +
  geom_density(alpha = 0.5) +
  scale_color_manual(values = c("black", "blue")) +
  scale_size_manual(values = c(10, 1)) +
  ggtitle("Distribution of Observed versus Predicted Birth Weights")


```

## Question 7

We proceed to define a custom stat function to calculate proportions of births under 2.5kgs, and then use ppc_stat to obtain the plots for that estimate under both models:

```{r}
count = 0
calculate_proportion <- function(x){
for (i in 1:length(x))   
  if(x[i]<log(2.5))
    count = count + 1
return(count/length(x))
  
}
ppc_mod1 <- extract(mod1)[["log_weight_rep"]]
ppc_mod2 <- extract(mod2)[["log_weight_rep"]]

ppc_stat(ds$log_weight,ppc_mod1,stat = 'calculate_proportion')
ppc_stat(ds$log_weight,ppc_mod2,stat = 'calculate_proportion')


```

As we can see from the plots, model 2 has proportion levels much closer to actual data as compared to model 1, indicating that model 2 captures the observed data far better.

## Question 8

We use the following code block to get the LOOs and perform LOO_compare:

```{r}
loglik1 <- rstan::extract(mod1)[["log_lik"]]
loo1 <- loo(loglik1, save_psis = TRUE)
loglik2 <- rstan::extract(mod2)[["log_lik"]]
loo2 <- loo(loglik2, save_psis = TRUE)
loo2
loo_compare(loo1,loo2)
```

Using the documentation of loo_compare, it tells us that the best model is always at the top, so, model 2 is better than model 1 in the results of loo_compare. We also see that model 1 has a relatively high standard error when compared to model 2 at 36.3.

## Question 9

We add a new covariate, which the mother's bmi on a log-scale in our model, and proceed to create model_3:

```{r}
#| output: false
ds$log_bmi <- log(ds$bmi)
stan_data<- list(N = nrow(ds),
log_weight = ds$log_weight,
log_gest = ds$log_gest_c,
preterm = preterm,
log_bmi = ds$log_bmi,
Inter = preterm*ds$log_gest_c)
mod3 <- stan(data = stan_data,
file = here("code/models/simple_weight_model_3.stan"),
iter = 500,
seed = 243)

```

We proceed to do posterior predictive checks on our model by first getting a density overlay plot and comparing it to model 2:

```{r}
obs_log_weight <- ds$log_weight
ppc_mod3 <- rstan::extract(mod3)[['log_weight_rep']]
samp_mod3_100 <- sample(nrow(ppc_mod3),100)

ppc_dens_overlay(obs_log_weight,ppc_mod3[samp_mod3_100,])+
  ggtitle("Distribution of observed vs predicted birthweights model 3")
ppc_dens_overlay(obs_log_weight,ppc_mod2[samp100,])+
  ggtitle("Distribution of observed vs predicted birthweights model 2")

```

We see that the density overlay plot has very similar results for both models.

Then, we proceed to analyze both the models on their posterior predictions of proportions of preterm births, and posterior predictions of proportions of underweight births:

```{r}
ppc_stat_grouped(obs_log_weight,ppc_mod3,group = ds$preterm, stat = 'median') + ggtitle("Model 3 preterm")
ppc_stat_grouped(obs_log_weight,ppc_mod2,group = ds$preterm, stat = 'median') + ggtitle("Model 2 preterm")

ppc_stat(ds$log_weight,ppc_mod3,stat = 'calculate_proportion')+
  ggtitle("Model 3 Under 2.5 Kg")
ppc_stat(ds$log_weight,ppc_mod2,stat = 'calculate_proportion')+
  ggtitle("Model 2 Under 2.5kg")
```

We again see that both models have pretty similar predictions to each other in each of these posterior predictive checks.

Finally, we proceed to get the loglikelihood of model 3 and use a loo_compare on it and the other 2 models.

```{r}
loglik3 <- rstan::extract(mod3)[["log_lik"]]
loo3 <-  loo(loglik3, save_psis = TRUE)
loo_compare(loo1,loo2,loo3)
```

We get to see that our model is slightly better than model 2, and overall much better than model 1.
