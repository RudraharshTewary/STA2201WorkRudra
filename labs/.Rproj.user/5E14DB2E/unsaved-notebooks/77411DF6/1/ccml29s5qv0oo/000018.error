{"frames":[{"func":"stan(data = stan_data, file = here(\"code/models/simple_weight_model_2.stan\"), \n    iter = 500, seed = 243)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stan_model(file, model_name = model_name, model_code = model_code, \n    stanc_ret = NULL, boost_lib = boost_lib, eigen_lib = eigen_lib, \n    save_dso = save_dso, verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stanc(file = file, model_code = model_code, model_name = model_name, \n    verbose = verbose, obfuscate_model_name = obfuscate_model_name, \n    allow_undefined = allow_undefined, allow_optimizations = allow_optimizations, \n    standalone_functions = standalone_functions, use_opencl = use_opencl,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(paste(model_cppcode$errors, collapse = \"\\n\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in stanc(file = file, model_code = model_code, model_name = model_name,  : \n  0\nSemantic error in 'string', line 23, column 68 to column 83:\n   -------------------------------------------------\n    21:  model {\n    22:    // Log-likelihood\n    23:    target += normal_lpdf(log_weight | beta[1] + beta[2] * log_gest + beta[3]*preterm + beta[4] * log_gest * preterm , sigma);\n                                                                             ^\n    24:    // Priors\n    25:    target += normal_lpdf(sigma | 0, 1)\n   -------------------------------------------------\n\nIll-typed arguments supplied to infix operator *. Available signatures: \n(int, int) => int\n(real, real) => real\n(row_vector, vector) => real\n(real, vector) => vector\n(vector, real) => vector\n(matrix, vector) => vector\n(complex, complex) => complex\n(complex_row_vector, complex_vector) => complex\n(real, row_vector) => row_vector\n(row_vector, real) => row_vector\n(row_vector, matrix) => row_vector\n(real, matrix) => matrix\n(vector, row_vector) => matrix\n(matrix, real) => matrix\n(matrix, matrix)\n"}